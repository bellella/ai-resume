// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id              String             @id @default(auto()) @map("_id") @db.ObjectId
  email           String             @unique
  password        String
  name            String?
  defaultResumeJson Json?
  imageUrl        String?
  coins           Int      @default(0)
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt

  resumes         Resume[]
  transactions    Transaction[]
}

model Resume {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  resumeJson  Json?
  templateJson Json?
  userId      String   @db.ObjectId
  user        User     @relation(fields: [userId], references: [id])
  templateId  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  aiEvaluations  AiEvaluation[]
}

model CoinItem {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  coins         Int
  price         Int
  stripePriceId String   @unique

  transactions  Transaction[] @relation("CoinItemTransactions")
}

model PurchasableItem {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  price         Int

  transactions  Transaction[] @relation("PurchasableItemTransactions")
}

model Transaction {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  userId            String   @db.ObjectId
  user              User     @relation(fields: [userId], references: [id])

  name              String
  type              TransactionType

  coinItemId        String?  @db.ObjectId
  coinItem          CoinItem? @relation(name: "CoinItemTransactions", fields: [coinItemId], references: [id])

  purchasableItemId String?  @db.ObjectId
  purchasableItem   PurchasableItem? @relation(name: "PurchasableItemTransactions", fields: [purchasableItemId], references: [id])

  meta              Json?

  price             Int
  createdAt         DateTime @default(now())
}

enum TransactionType {
  CHARGE
  USAGE
  REFUND
}

model AiEvaluation {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  resumeId    String   @db.ObjectId
  score       Int
  summary     String
  strengths   String[]
  weaknesses  String[]
  createdAt   DateTime @default(now())

  resume      Resume   @relation(fields: [resumeId], references: [id], onDelete: Cascade)
}
